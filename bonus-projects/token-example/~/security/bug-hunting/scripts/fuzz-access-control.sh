#!/bin/bash

# üîê Access Control Fuzzer
# Tests for authorization bypasses and privilege escalation

echo "üîê Fuzzing Access Control..."
echo "============================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to log findings
log_finding() {
    echo -e "${BLUE}[FUZZ]${NC} $1"
}

# Function to highlight vulnerabilities
highlight_vulnerability() {
    echo -e "${RED}[VULNERABILITY]${NC} $1"
}

# Function to highlight success
highlight_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if target directory is provided
if [ -z "$1" ]; then
    echo "‚ùå Please provide a target directory"
    echo "Usage: ./fuzz-access-control.sh [target-directory]"
    exit 1
fi

TARGET_DIR="$1"
echo "üéØ Target: $TARGET_DIR"

# Check if target exists
if [ ! -d "$TARGET_DIR" ]; then
    echo "‚ùå Target directory does not exist: $TARGET_DIR"
    exit 1
fi

cd "$TARGET_DIR"

echo ""
echo "üîç Scanning for access control patterns..."

# 1. Look for signer validation
log_finding "Scanning for signer validation..."

# Find Signer types
if grep -r "Signer<" --include="*.rs" . > /dev/null; then
    echo "   Found Signer validations"
    grep -r "Signer<" --include="*.rs" . | head -5
else
    highlight_vulnerability "No Signer validations found!"
fi

# Find UncheckedAccount usage
if grep -r "UncheckedAccount" --include="*.rs" . > /dev/null; then
    highlight_vulnerability "Found UncheckedAccount usage"
    grep -r "UncheckedAccount" --include="*.rs" .
fi

echo ""

# 2. Look for authority checks
log_finding "Scanning for authority checks..."

# Find authority validation
if grep -r "authority\|Authority" --include="*.rs" . > /dev/null; then
    echo "   Found authority references"
    grep -r "authority\|Authority" --include="*.rs" . | head -5
fi

# Find owner checks
if grep -r "owner\|Owner" --include="*.rs" . > /dev/null; then
    echo "   Found owner references"
    grep -r "owner\|Owner" --include="*.rs" . | head -5
fi

echo ""

# 3. Look for admin functions
log_finding "Scanning for admin functions..."

# Find admin references
if grep -r "admin\|Admin" --include="*.rs" . > /dev/null; then
    echo "   Found admin functions"
    grep -r "admin\|Admin" --include="*.rs" . | head -5
fi

# Find privileged operations
if grep -r "privilege\|Privilege" --include="*.rs" . > /dev/null; then
    echo "   Found privileged operations"
    grep -r "privilege\|Privilege" --include="*.rs" . | head -5
fi

echo ""

# 4. Look for cross-program invocations
log_finding "Scanning for cross-program invocations..."

# Find CPI calls
if grep -r "CpiContext\|invoke\|invoke_signed" --include="*.rs" . > /dev/null; then
    echo "   Found CPI calls"
    grep -r "CpiContext\|invoke\|invoke_signed" --include="*.rs" . | head -5
fi

# Find external program calls
if grep -r "Program<" --include="*.rs" . > /dev/null; then
    echo "   Found external program references"
    grep -r "Program<" --include="*.rs" . | head -5
fi

echo ""

# 5. Look for missing validation patterns
log_finding "Scanning for missing validation patterns..."

# Find functions without signer checks
if grep -r "pub fn" --include="*.rs" . > /dev/null; then
    echo "   Found public functions (check for signer validation)"
    grep -r "pub fn" --include="*.rs" . | head -5
fi

# Find mutable accounts without validation
if grep -r "#\[account\(mut\)\]" --include="*.rs" . > /dev/null; then
    echo "   Found mutable accounts (check for validation)"
    grep -r "#\[account\(mut\)\]" --include="*.rs" . | head -5
fi

echo ""

# 6. Generate test cases
log_finding "Generating test cases for access control..."

# Create test file
TEST_FILE="access_control_fuzz_tests.rs"
cat > "$TEST_FILE" << 'EOF'
// üîê Access Control Fuzz Tests
// Generated by fuzz-access-control.sh

#[cfg(test)]
mod access_control_fuzz_tests {
    use super::*;

    #[test]
    fn test_unauthorized_access() {
        // Test with wrong signers
        // let wrong_signer = Keypair::new();
        // Test function calls with wrong signer
        
        // Test with wrong authorities
        // let wrong_authority = Keypair::new();
        // Test authority-based functions
    }

    #[test]
    fn test_privilege_escalation() {
        // Test admin function access
        // Test with non-admin accounts
        
        // Test authority transfer
        // Test unauthorized authority changes
    }

    #[test]
    fn test_cross_program_invocation() {
        // Test CPI security
        // Test with unauthorized programs
        
        // Test external program calls
        // Test program validation
    }

    #[test]
    fn test_account_validation() {
        // Test account ownership
        // Test with wrong account owners
        
        // Test account state validation
        // Test account mutability
    }

    #[test]
    fn test_edge_cases() {
        // Test with null/empty accounts
        // Test with invalid public keys
        
        // Test with wrong account types
        // Test with malformed data
    }
}
EOF

highlight_success "Generated test file: $TEST_FILE"

echo ""
echo "üìä Access Control Fuzzing Summary:"
echo "=================================="

# Count findings
SIGNER_COUNT=$(grep -r "Signer<" --include="*.rs" . | wc -l)
UNCHECKED_COUNT=$(grep -r "UncheckedAccount" --include="*.rs" . | wc -l)
AUTHORITY_COUNT=$(grep -r "authority\|Authority" --include="*.rs" . | wc -l)
ADMIN_COUNT=$(grep -r "admin\|Admin" --include="*.rs" . | wc -l)
CPI_COUNT=$(grep -r "CpiContext\|invoke\|invoke_signed" --include="*.rs" . | wc -l)

echo "   ‚Ä¢ Signer validations found: $SIGNER_COUNT"
echo "   ‚Ä¢ UncheckedAccount usage: $UNCHECKED_COUNT"
echo "   ‚Ä¢ Authority references: $AUTHORITY_COUNT"
echo "   ‚Ä¢ Admin functions: $ADMIN_COUNT"
echo "   ‚Ä¢ CPI calls: $CPI_COUNT"

if [ "$UNCHECKED_COUNT" -gt 0 ]; then
    echo ""
    highlight_vulnerability "‚ö†Ô∏è  WARNING: Found $UNCHECKED_COUNT UncheckedAccount usages!"
    echo "   These are potential access control vulnerabilities."
    echo "   Review each UncheckedAccount usage carefully."
fi

if [ "$SIGNER_COUNT" -eq 0 ]; then
    echo ""
    highlight_vulnerability "‚ö†Ô∏è  WARNING: No Signer validations found!"
    echo "   This could indicate missing access control."
    echo "   Review all public functions for proper authorization."
fi

echo ""
echo "üéØ Next Steps:"
echo "1. Review the generated test file: $TEST_FILE"
echo "2. Add specific test cases for your protocol"
echo "3. Run the tests: cargo test access_control_fuzz_tests"
echo "4. Fix any vulnerabilities found"

echo ""
echo "üîê Access control fuzzing complete! üöÄ"
