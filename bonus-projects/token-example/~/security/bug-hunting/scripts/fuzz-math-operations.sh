#!/bin/bash

# 🔢 Math Operations Fuzzer
# Tests for overflow, underflow, and precision issues

echo "🔢 Fuzzing Math Operations..."
echo "============================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to log findings
log_finding() {
    echo -e "${BLUE}[FUZZ]${NC} $1"
}

# Function to highlight vulnerabilities
highlight_vulnerability() {
    echo -e "${RED}[VULNERABILITY]${NC} $1"
}

# Function to highlight success
highlight_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if target directory is provided
if [ -z "$1" ]; then
    echo "❌ Please provide a target directory"
    echo "Usage: ./fuzz-math-operations.sh [target-directory]"
    exit 1
fi

TARGET_DIR="$1"
echo "🎯 Target: $TARGET_DIR"

# Check if target exists
if [ ! -d "$TARGET_DIR" ]; then
    echo "❌ Target directory does not exist: $TARGET_DIR"
    exit 1
fi

cd "$TARGET_DIR"

echo ""
echo "🔍 Scanning for math operations..."

# 1. Look for arithmetic operations
log_finding "Scanning for arithmetic operations..."

# Find addition operations
if grep -r " + " --include="*.rs" . > /dev/null; then
    echo "   Found addition operations"
    grep -r " + " --include="*.rs" . | head -5
fi

# Find multiplication operations
if grep -r " \* " --include="*.rs" . > /dev/null; then
    echo "   Found multiplication operations"
    grep -r " \* " --include="*.rs" . | head -5
fi

# Find subtraction operations
if grep -r " - " --include="*.rs" . > /dev/null; then
    echo "   Found subtraction operations"
    grep -r " - " --include="*.rs" . | head -5
fi

# Find division operations
if grep -r " / " --include="*.rs" . > /dev/null; then
    echo "   Found division operations"
    grep -r " / " --include="*.rs" . | head -5
fi

echo ""

# 2. Look for unchecked operations
log_finding "Scanning for unchecked operations..."

# Find unchecked_add
if grep -r "unchecked_add" --include="*.rs" . > /dev/null; then
    highlight_vulnerability "Found unchecked_add operations"
    grep -r "unchecked_add" --include="*.rs" .
fi

# Find unchecked_mul
if grep -r "unchecked_mul" --include="*.rs" . > /dev/null; then
    highlight_vulnerability "Found unchecked_mul operations"
    grep -r "unchecked_mul" --include="*.rs" .
fi

# Find unchecked_sub
if grep -r "unchecked_sub" --include="*.rs" . > /dev/null; then
    highlight_vulnerability "Found unchecked_sub operations"
    grep -r "unchecked_sub" --include="*.rs" .
fi

echo ""

# 3. Look for potential overflow scenarios
log_finding "Scanning for potential overflow scenarios..."

# Look for operations with large numbers
if grep -r "u64::MAX\|u128::MAX" --include="*.rs" . > /dev/null; then
    echo "   Found operations with maximum values"
    grep -r "u64::MAX\|u128::MAX" --include="*.rs" .
fi

# Look for operations with user input
if grep -r "amount\|value\|balance" --include="*.rs" . > /dev/null; then
    echo "   Found operations with user-controlled values"
    grep -r "amount\|value\|balance" --include="*.rs" . | head -5
fi

echo ""

# 4. Look for precision loss scenarios
log_finding "Scanning for precision loss scenarios..."

# Look for division operations
if grep -r " / " --include="*.rs" . > /dev/null; then
    echo "   Found division operations (potential precision loss)"
    grep -r " / " --include="*.rs" . | head -3
fi

# Look for decimal operations
if grep -r "decimal\|precision\|round" --include="*.rs" . > /dev/null; then
    echo "   Found decimal/precision operations"
    grep -r "decimal\|precision\|round" --include="*.rs" . | head -3
fi

echo ""

# 5. Generate test cases
log_finding "Generating test cases for math operations..."

# Create test file
TEST_FILE="math_fuzz_tests.rs"
cat > "$TEST_FILE" << 'EOF'
// 🔢 Math Operations Fuzz Tests
// Generated by fuzz-math-operations.sh

#[cfg(test)]
mod math_fuzz_tests {
    use super::*;

    #[test]
    fn test_overflow_scenarios() {
        // Test with maximum values
        let max_u64 = u64::MAX;
        let max_u128 = u128::MAX;
        
        // Test addition overflow
        // let result = max_u64 + 1; // This should panic or be handled
        
        // Test multiplication overflow
        // let result = max_u64 * 2; // This should panic or be handled
    }

    #[test]
    fn test_underflow_scenarios() {
        // Test with minimum values
        let min_u64 = 0u64;
        
        // Test subtraction underflow
        // let result = min_u64 - 1; // This should panic or be handled
    }

    #[test]
    fn test_precision_loss() {
        // Test division precision
        let large_number = 1000000000u64;
        let small_divisor = 3u64;
        
        // let result = large_number / small_divisor;
        // Check for precision loss
    }

    #[test]
    fn test_edge_cases() {
        // Test edge cases
        let zero = 0u64;
        let one = 1u64;
        
        // Test division by zero
        // let result = large_number / zero; // This should panic
        
        // Test multiplication by zero
        // let result = large_number * zero; // Should be zero
    }
}
EOF

highlight_success "Generated test file: $TEST_FILE"

echo ""
echo "📊 Math Fuzzing Summary:"
echo "========================="

# Count findings
ARITHMETIC_COUNT=$(grep -r " + \| \* \| - \| / " --include="*.rs" . | wc -l)
UNCHECKED_COUNT=$(grep -r "unchecked_" --include="*.rs" . | wc -l)
OVERFLOW_RISK_COUNT=$(grep -r "u64::MAX\|u128::MAX\|amount\|value\|balance" --include="*.rs" . | wc -l)

echo "   • Arithmetic operations found: $ARITHMETIC_COUNT"
echo "   • Unchecked operations found: $UNCHECKED_COUNT"
echo "   • Potential overflow risks: $OVERFLOW_RISK_COUNT"

if [ "$UNCHECKED_COUNT" -gt 0 ]; then
    echo ""
    highlight_vulnerability "⚠️  WARNING: Found $UNCHECKED_COUNT unchecked operations!"
    echo "   These are potential security vulnerabilities."
    echo "   Review each unchecked operation carefully."
fi

echo ""
echo "🎯 Next Steps:"
echo "1. Review the generated test file: $TEST_FILE"
echo "2. Add specific test cases for your protocol"
echo "3. Run the tests: cargo test math_fuzz_tests"
echo "4. Fix any vulnerabilities found"

echo ""
echo "🔢 Math fuzzing complete! 🚀"
