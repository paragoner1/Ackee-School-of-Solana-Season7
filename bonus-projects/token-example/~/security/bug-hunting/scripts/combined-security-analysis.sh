#!/bin/bash

# 🔒 Combined Security Analysis
# Runs all security tools in sequence for comprehensive analysis

echo "🔒 Combined Security Analysis"
echo "============================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Function to log section
log_section() {
    echo -e "${PURPLE}📋 $1${NC}"
    echo "============================="
}

# Function to log finding
log_finding() {
    echo -e "${BLUE}[ANALYSIS]${NC} $1"
}

# Function to highlight vulnerabilities
highlight_vulnerability() {
    echo -e "${RED}[VULNERABILITY]${NC} $1"
}

# Function to highlight success
highlight_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if target directory is provided
if [ -z "$1" ]; then
    echo "❌ Please provide a target directory"
    echo "Usage: ./combined-security-analysis.sh [target-directory]"
    exit 1
fi

TARGET_DIR="$1"
echo "🎯 Target: $TARGET_DIR"

# Check if target exists
if [ ! -d "$TARGET_DIR" ]; then
    echo "❌ Target directory does not exist: $TARGET_DIR"
    exit 1
fi

# Create analysis directory
ANALYSIS_DIR="$TARGET_DIR/security-analysis-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$ANALYSIS_DIR"
echo "📁 Analysis results will be saved to: $ANALYSIS_DIR"

cd "$TARGET_DIR"

echo ""
log_section "Phase 1: Static Analysis with VS Code Extension"

# Check if VS Code extension is available
if command -v code &> /dev/null; then
    log_finding "VS Code extension available"
    echo "   Run 'solana: Scan Workspace for Security Issues' in VS Code/Cursor"
    echo "   This will provide initial static analysis"
else
    log_finding "VS Code CLI not available"
    echo "   Please run security scan manually in VS Code/Cursor"
fi

echo ""
log_section "Phase 2: Math Operations Fuzzing"

# Run math fuzzing
if [ -f "../scripts/fuzz-math-operations.sh" ]; then
    log_finding "Running math operations fuzzer..."
    ../scripts/fuzz-math-operations.sh . > "$ANALYSIS_DIR/math-fuzzing.txt" 2>&1
    highlight_success "Math fuzzing completed"
    echo "   Results saved to: $ANALYSIS_DIR/math-fuzzing.txt"
else
    highlight_vulnerability "Math fuzzing script not found"
fi

echo ""
log_section "Phase 3: Access Control Fuzzing"

# Run access control fuzzing
if [ -f "../scripts/fuzz-access-control.sh" ]; then
    log_finding "Running access control fuzzer..."
    ../scripts/fuzz-access-control.sh . > "$ANALYSIS_DIR/access-control-fuzzing.txt" 2>&1
    highlight_success "Access control fuzzing completed"
    echo "   Results saved to: $ANALYSIS_DIR/access-control-fuzzing.txt"
else
    highlight_vulnerability "Access control fuzzing script not found"
fi

echo ""
log_section "Phase 4: Automated Escalation Analysis"

# Run escalation scanner
if [ -f "../scripts/automated-escalation-scanner.sh" ]; then
    log_finding "Running escalation scanner..."
    ../scripts/automated-escalation-scanner.sh . > "$ANALYSIS_DIR/escalation-analysis.txt" 2>&1
    highlight_success "Escalation analysis completed"
    echo "   Results saved to: $ANALYSIS_DIR/escalation-analysis.txt"
else
    highlight_vulnerability "Escalation scanner not found"
fi

echo ""
log_section "Phase 5: Custom Pattern Analysis"

# Look for common vulnerability patterns
log_finding "Scanning for common vulnerability patterns..."

# Create pattern analysis file
PATTERN_FILE="$ANALYSIS_DIR/pattern-analysis.txt"
cat > "$PATTERN_FILE" << 'EOF'
# 🔍 Custom Pattern Analysis
# Generated by combined-security-analysis.sh

## Unchecked Operations
EOF

# Find unchecked operations
echo "## Unchecked Operations" >> "$PATTERN_FILE"
grep -r "unchecked_" --include="*.rs" . >> "$PATTERN_FILE" 2>/dev/null || echo "None found" >> "$PATTERN_FILE"

cat >> "$PATTERN_FILE" << 'EOF'

## Manual Lamports Zeroing
EOF

# Find manual lamports zeroing
echo "## Manual Lamports Zeroing" >> "$PATTERN_FILE"
grep -r "lamports.*=.*0" --include="*.rs" . >> "$PATTERN_FILE" 2>/dev/null || echo "None found" >> "$PATTERN_FILE"

cat >> "$PATTERN_FILE" << 'EOF'

## Missing InitSpace
EOF

# Find missing init space
echo "## Missing InitSpace" >> "$PATTERN_FILE"
grep -r "#\[account\(init" --include="*.rs" . | grep -v "space" >> "$PATTERN_FILE" 2>/dev/null || echo "None found" >> "$PATTERN_FILE"

cat >> "$PATTERN_FILE" << 'EOF'

## Sysvar Account Access
EOF

# Find sysvar account access
echo "## Sysvar Account Access" >> "$PATTERN_FILE"
grep -r "sysvar" --include="*.rs" . >> "$PATTERN_FILE" 2>/dev/null || echo "None found" >> "$PATTERN_FILE"

cat >> "$PATTERN_FILE" << 'EOF'

## Cross-Program Invocations
EOF

# Find CPI calls
echo "## Cross-Program Invocations" >> "$PATTERN_FILE"
grep -r "CpiContext\|invoke\|invoke_signed" --include="*.rs" . >> "$PATTERN_FILE" 2>/dev/null || echo "None found" >> "$PATTERN_FILE"

cat >> "$PATTERN_FILE" << 'EOF'

## Admin Functions
EOF

# Find admin functions
echo "## Admin Functions" >> "$PATTERN_FILE"
grep -r "admin\|Admin" --include="*.rs" . >> "$PATTERN_FILE" 2>/dev/null || echo "None found" >> "$PATTERN_FILE"

cat >> "$PATTERN_FILE" << 'EOF'

## Authority References
EOF

# Find authority references
echo "## Authority References" >> "$PATTERN_FILE"
grep -r "authority\|Authority" --include="*.rs" . >> "$PATTERN_FILE" 2>/dev/null || echo "None found" >> "$PATTERN_FILE"

highlight_success "Pattern analysis completed"
echo "   Results saved to: $PATTERN_FILE"

echo ""
log_section "Phase 6: Code Coverage Analysis"

# Check for test files
log_finding "Analyzing test coverage..."

TEST_COUNT=$(find . -name "*.ts" -o -name "*_test.rs" -o -name "test_*.rs" | wc -l)
echo "   Test files found: $TEST_COUNT"

if [ "$TEST_COUNT" -gt 0 ]; then
    echo "   Test files:"
    find . -name "*.ts" -o -name "*_test.rs" -o -name "test_*.rs" | head -5
fi

# Check for Anchor.toml
if [ -f "Anchor.toml" ]; then
    log_finding "Anchor project detected"
    echo "   Run 'anchor test' for comprehensive testing"
else
    log_finding "No Anchor.toml found"
    echo "   Consider adding Anchor framework for better testing"
fi

echo ""
log_section "Phase 7: Generate Summary Report"

# Create summary report
SUMMARY_FILE="$ANALYSIS_DIR/security-summary.md"
cat > "$SUMMARY_FILE" << EOF
# 🔒 Security Analysis Summary
## Generated: $(date)

### Target: $TARGET_DIR
### Analysis Date: $(date)

## 📊 Analysis Overview

This report contains the results of a comprehensive security analysis using multiple tools and techniques.

## 🛠️ Tools Used

1. **VS Code Extension** - Static analysis
2. **Math Operations Fuzzer** - Overflow/underflow detection
3. **Access Control Fuzzer** - Authorization bypass detection
4. **Escalation Scanner** - Critical vulnerability detection
5. **Pattern Analysis** - Common vulnerability patterns
6. **Code Coverage Analysis** - Test coverage assessment

## 📋 Files Generated

- \`math-fuzzing.txt\` - Math operations analysis
- \`access-control-fuzzing.txt\` - Access control analysis
- \`escalation-analysis.txt\` - Escalation analysis
- \`pattern-analysis.txt\` - Pattern-based analysis
- \`security-summary.md\` - This summary report

## 🎯 Next Steps

1. **Review all generated files**
2. **Address high-priority vulnerabilities**
3. **Implement recommended fixes**
4. **Run follow-up analysis**
5. **Document findings for bug reports**

## 📞 Support

For questions about this analysis, refer to the security workspace documentation.
EOF

highlight_success "Summary report generated"
echo "   Results saved to: $SUMMARY_FILE"

echo ""
log_section "Analysis Complete"

echo "📁 All results saved to: $ANALYSIS_DIR"
echo ""
echo "📋 Generated Files:"
echo "   • math-fuzzing.txt"
echo "   • access-control-fuzzing.txt"
echo "   • escalation-analysis.txt"
echo "   • pattern-analysis.txt"
echo "   • security-summary.md"

echo ""
echo "🎯 Next Steps:"
echo "1. Review all analysis files"
echo "2. Address critical vulnerabilities first"
echo "3. Use findings for bug reports"
echo "4. Run follow-up analysis after fixes"

echo ""
echo "🔒 Combined security analysis complete! 🚀"
